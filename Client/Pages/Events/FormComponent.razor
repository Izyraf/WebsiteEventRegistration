@inject HttpClient _client

<EditForm Model="@Event" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Host: </label>
            <div>
                <InputSelect @bind-Value="Event.HostID" class="form-control">
                    <option value="">-- Select Host --</option>
                    @if (Hosts != null)
                    {
                        foreach (var host in Hosts)
                        {
                            <option value="@host.ID">@host.HostName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Event.HostID)" />
            </div>
        </div>
        <div class="form-group">
            <label>Event Name: </label>
            <div>
                <InputText @bind-Value="@Event.EventName" class="form-control" />
                <ValidationMessage For="@(() => Event.EventName)" />
            </div>
        </div>
        <div class="form-group">
            <label>Event Date: </label>
            <div>
                <InputDate @bind-Value="@Event.EventDate" class="form-control" />
                <ValidationMessage For="@(() => Event.EventDate)" />
            </div>
        </div>
        <div class="form-group">
            <label>Event Address: </label>
            <div>
                <InputText @bind-Value="@Event.EventAddress" class="form-control" />
                <ValidationMessage For="@(() => Event.EventAddress)" />
            </div>
        </div>
        <div class="form-group">
            <label>Event Capacity: </label>
            <div>
                <InputNumber @bind-Value="@Event.EventCapacity" class="form-control" />
                <ValidationMessage For="@(() => Event.EventCapacity)" />
            </div>
        </div>
        <div class="form-group">
            <label>Description: </label>
            <div>
                <InputText @bind-Value="@Event.Description" class="form-control" />
                <ValidationMessage For="@(() => Event.Description)" />
            </div>
        </div>
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="events" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Event Event { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Host> Hosts;

    protected async override Task OnInitializedAsync()
    {
        Hosts = await _client.GetFromJsonAsync<List<Host>>($"{Endpoints.HostEndpoint}");
    }
}